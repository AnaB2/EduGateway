{"ast":null,"code":"import { getEmail, getToken, getUserType } from \"./storage\";\nconst API_URL = 'http://localhost:4321'; // Replace this with your actual backend URL\n\n// const addAuthorizationHeader = (options) => {\n//     const token = getToken();\n//     const email = getEmail(); // Obtener el email del almacenamiento local\n//\n//     console.log(\"Token obtenido:\", token);\n//     console.log(\"Email obtenido:\", email);\n//\n//     // Verificar si hay un token disponible\n//     if (token) {\n//         // Si existe un token, agregar el encabezado de autorizaci贸n a las opciones de la solicitud\n//         if (!options.headers) {\n//             options.headers = {};\n//         }\n//         options.headers.Authorization = `${token}`;\n//         options.headers.Email = email;\n//\n//     } else {\n//         // Si no hay un token disponible, lanzar un error\n//         throw new Error('Token de sesi贸n no encontrado.');\n//     }\n//\n//     console.log(\"Encabezado de autorizaci贸n agregado:\", options.headers.Authorization);\n//\n//     return options;\n// };\n\nexport const addOpportunity = async opportunityData => {\n  try {\n    const token = getToken();\n    const email = getEmail();\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (token && email) {\n      headers.Authorization = `${token}`;\n      headers.Email = email;\n    } else {\n      throw new Error('Token de sesi贸n no encontrado.');\n    }\n    const response = await fetch(`${API_URL}/add-opportunity`, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify(opportunityData)\n    });\n    console.log(\"Datos de la oportunidad:\", opportunityData);\n    if (response.status === 401) {\n      throw new Error('Unauthorized access');\n    }\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Failed to add opportunity:\", error);\n    throw error;\n  }\n};\nexport const deleteOpportunity = async name => {\n  try {\n    const response = await fetch(`${API_URL}/delete-opportunity`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Failed to delete opportunity:\", error);\n    throw error;\n  }\n};\nexport const modifyOpportunity = async (opportunityData, previousName) => {\n  try {\n    opportunityData.previousName = previousName;\n    const response = await fetch(`${API_URL}/edit-opportunity`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(opportunityData) // convierte objeto opportunityData en JSON\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return await response.json(); // devuelve objeto\n  } catch (error) {\n    console.error(\"Failed to modify opportunity:\", error);\n    throw error;\n  }\n};\nexport async function getOpportunitiesByInstitution() {\n  try {\n    const token = getToken();\n    const email = getEmail();\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (!token || !email) {\n      throw new Error('Token o correo no encontrados.');\n    }\n    const queryParams = new URLSearchParams({\n      email: email\n    }).toString();\n    const response = await fetch(`${API_URL}/get-opportunities-institution?${queryParams}`, {\n      method: 'GET',\n      headers: headers\n    });\n    if (response.status === 401) {\n      throw new Error('Unauthorized access');\n    }\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return await response.json(); // devuelve objeto\n  } catch (error) {\n    console.error(\"Failed to get opportunities by institution:\", error);\n    throw error;\n  }\n}\nexport async function getOpportunities() {\n  try {\n    const token = getToken();\n    const email = getEmail();\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (!token || !email) {\n      throw new Error('Token o correo no encontrados.');\n    }\n    const response = await fetch(`${API_URL}/get-opportunities`, {\n      method: 'GET',\n      headers: headers\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return await response.json(); // devuelve objeto\n  } catch (error) {\n    console.error(\"Failed to get opportunities:\", error);\n    throw error;\n  }\n}\nexport async function addInscription(email, opportunityId, formData) {\n  try {\n    const response = await fetch(`${API_URL}/add-inscription`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Email': email,\n        'OpportunityId': opportunityId\n      },\n      body: JSON.stringify(formData)\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Failed to add inscription:', error);\n    throw error;\n  }\n}\nexport async function getInscriptions() {\n  try {\n    const token = getToken();\n    const email = getEmail();\n    if (!token || !email) {\n      throw new Error('Token o correo no encontrados.');\n    }\n    const headers = {\n      'Content-Type': 'application/json',\n      'Email': email,\n      'Token': token\n    };\n    const response = await fetch(`${API_URL}/get-inscriptions`, {\n      method: 'GET',\n      headers: headers\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return await response.json(); // devuelve objeto\n  } catch (error) {\n    console.error(\"Failed to get inscriptions:\", error);\n    throw error;\n  }\n}\nexport async function approveInscription(inscriptionId) {\n  try {\n    const body = JSON.stringify({\n      inscriptionId\n    });\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    const response = await fetch(`${API_URL}/approve-inscription`, {\n      method: 'POST',\n      headers: headers,\n      body: body\n    });\n  } catch (error) {\n    console.error(\"Failed to approve inscription:\", error);\n    throw error;\n  }\n}\nexport async function rejectInscription(inscriptionId) {\n  try {\n    const body = JSON.stringify({\n      inscriptionId\n    });\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    const response = await fetch(`${API_URL}/reject-inscription`, {\n      method: 'POST',\n      headers: headers,\n      body: body\n    });\n  } catch (error) {\n    console.error(\"Failed to reject inscription:\", error);\n    throw error;\n  }\n}\nexport async function followInstitution(userEmail, institutionEmail) {\n  try {\n    const token = getToken();\n    const email = getEmail();\n    if (!token || !email) {\n      throw new Error('Token o correo no encontrados.');\n    }\n    const headers = {\n      'Content-Type': 'application/json',\n      'Email': email,\n      'Token': token\n    };\n    const response = await fetch(`${API_URL}/follow-institution`, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        UserEmail: userEmail,\n        institutionEmail: institutionEmail\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return await response.json(); // devuelve objeto\n  } catch (error) {\n    console.error(\"Failed to follow institution:\", error);\n    throw error;\n  }\n}\nexport async function getFollowedInstitutions() {\n  try {\n    const token = getToken();\n    const email = getEmail();\n    if (!token || !email) {\n      throw new Error('Token o correo no encontrados.');\n    }\n    const headers = {\n      'Content-Type': 'application/json',\n      'Email': email,\n      'Token': token\n    };\n    const response = await fetch(`${API_URL}/get-followed-institutions?email=${email}`, {\n      method: 'GET',\n      headers: headers\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return await response.json(); // devuelve objeto\n  } catch (e) {\n    throw `Failed to get followed institutions: ${e}`;\n  }\n}\nexport async function isFollowingInstitution(userEmail, institutionEmail) {\n  /*try {\r\n      const token = getToken();\r\n      const email = getEmail();\r\n      if (!token || !email) {throw new Error('Token o correo no encontrados.');}\r\n         const headers =  {\r\n          'Content-Type': 'application/json',\r\n          'Email' : email,\r\n          'Token' : token\r\n      };\r\n        const response = await fetch(`${API_URL}/is-following-institution`, {\r\n          method: 'POST',\r\n          headers: headers,\r\n          body: JSON.stringify({ UserEmail: userEmail, institutionEmail: institutionEmail})\r\n      });\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n      }\r\n        return await response.json(); // devuelve objeto\r\n    } catch (error) {\r\n      console.error(\"Failed to check if user is following institution:\", error);\r\n      throw error;\r\n  }*/\n  return true;\n}\nexport const editUser = async (userData, previousEmail) => {\n  try {\n    userData.previousEmail = previousEmail;\n    const response = await fetch(`${API_URL}/edit-user`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Failed to edit profile:\", error);\n    throw error;\n  }\n};\nexport const editInstitution = async (institutionData, previousEmail) => {\n  try {\n    institutionData.previousEmail = previousEmail;\n    const response = await fetch(`${API_URL}/edit-institution`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(institutionData)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to edit institution profile: ' + (await response.text()));\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Failed to edit institution profile:\", error);\n    throw error;\n  }\n};\nexport const getInstitutionData = async email => {\n  try {\n    const response = await fetch(`${API_URL}/get-institution-data?email=${email}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to get institution data: ' + (await response.text()));\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Failed to get institution data:\", error);\n    throw error;\n  }\n};\nexport const getUserData = async email => {\n  try {\n    const response = await fetch(`${API_URL}/get-user-data?email=${email}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to get user data: ' + (await response.text()));\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Failed to get user data:\", error);\n    throw error;\n  }\n};\nexport const deleteUser = async email => {\n  try {\n    const response = await fetch(`${API_URL}/delete-user`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to delete user: ' + (await response.text()));\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Failed to delete user:\", error);\n    throw error;\n  }\n};\nexport const deleteInstitution = async email => {\n  try {\n    const response = await fetch(`${API_URL}/delete-institution`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to delete institution: ' + (await response.text()));\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Failed to delete institution:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["getEmail","getToken","getUserType","API_URL","addOpportunity","opportunityData","token","email","headers","Authorization","Email","Error","response","fetch","method","body","JSON","stringify","console","log","status","ok","json","error","deleteOpportunity","name","modifyOpportunity","previousName","getOpportunitiesByInstitution","queryParams","URLSearchParams","toString","getOpportunities","addInscription","opportunityId","formData","getInscriptions","approveInscription","inscriptionId","rejectInscription","followInstitution","userEmail","institutionEmail","UserEmail","getFollowedInstitutions","e","isFollowingInstitution","editUser","userData","previousEmail","editInstitution","institutionData","text","getInstitutionData","getUserData","deleteUser","deleteInstitution"],"sources":["C:/Users/marpr/proyects/EduGateway/src/main/js/front-edu-gateway/src/services/Api.js"],"sourcesContent":["import {getEmail, getToken, getUserType} from \"./storage\";\r\n\r\nconst API_URL = 'http://localhost:4321'; // Replace this with your actual backend URL\r\n\r\n\r\n// const addAuthorizationHeader = (options) => {\r\n//     const token = getToken();\r\n//     const email = getEmail(); // Obtener el email del almacenamiento local\r\n//\r\n//     console.log(\"Token obtenido:\", token);\r\n//     console.log(\"Email obtenido:\", email);\r\n//\r\n//     // Verificar si hay un token disponible\r\n//     if (token) {\r\n//         // Si existe un token, agregar el encabezado de autorizaci贸n a las opciones de la solicitud\r\n//         if (!options.headers) {\r\n//             options.headers = {};\r\n//         }\r\n//         options.headers.Authorization = `${token}`;\r\n//         options.headers.Email = email;\r\n//\r\n//     } else {\r\n//         // Si no hay un token disponible, lanzar un error\r\n//         throw new Error('Token de sesi贸n no encontrado.');\r\n//     }\r\n//\r\n//     console.log(\"Encabezado de autorizaci贸n agregado:\", options.headers.Authorization);\r\n//\r\n//     return options;\r\n// };\r\n\r\nexport const addOpportunity = async (opportunityData) => {\r\n    try {\r\n        const token = getToken();\r\n        const email = getEmail();\r\n\r\n        const headers = {\r\n            'Content-Type': 'application/json'\r\n        };\r\n\r\n        if (token && email) {\r\n            headers.Authorization = `${token}`;\r\n            headers.Email = email;\r\n        } else {\r\n            throw new Error('Token de sesi贸n no encontrado.');\r\n        }\r\n\r\n        const response = await fetch(`${API_URL}/add-opportunity`, {\r\n            method: 'POST',\r\n            headers: headers,\r\n            body: JSON.stringify(opportunityData)\r\n        });\r\n\r\n        console.log(\"Datos de la oportunidad:\", opportunityData);\r\n\r\n        if (response.status === 401) {\r\n            throw new Error('Unauthorized access');\r\n        }\r\n\r\n        if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n        }\r\n\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error(\"Failed to add opportunity:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const deleteOpportunity = async (name) => {\r\n    try {\r\n        const response = await fetch(`${API_URL}/delete-opportunity`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ name: name}),\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n        }\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error(\"Failed to delete opportunity:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const modifyOpportunity = async (opportunityData, previousName) => {\r\n    try {\r\n        opportunityData.previousName = previousName;\r\n        const response = await fetch(`${API_URL}/edit-opportunity`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(opportunityData), // convierte objeto opportunityData en JSON\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n        }\r\n        return await response.json(); // devuelve objeto\r\n    } catch (error) {\r\n        console.error(\"Failed to modify opportunity:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport async function getOpportunitiesByInstitution() {\r\n    try {\r\n        const token = getToken();\r\n        const email = getEmail();\r\n        const headers = {'Content-Type': 'application/json'};\r\n\r\n        if (!token || !email) {throw new Error('Token o correo no encontrados.');}\r\n\r\n        const queryParams = new URLSearchParams({ email: email }).toString();\r\n\r\n        const response = await fetch(`${API_URL}/get-opportunities-institution?${queryParams}`, {\r\n            method: 'GET',\r\n            headers: headers,\r\n        });\r\n\r\n        if (response.status === 401) {\r\n            throw new Error('Unauthorized access');\r\n        }\r\n        if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n        }\r\n\r\n        return await response.json(); // devuelve objeto\r\n\r\n    } catch (error) {\r\n        console.error(\"Failed to get opportunities by institution:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport async function getOpportunities() {\r\n    try {\r\n        const token = getToken();\r\n        const email = getEmail();\r\n        const headers = {'Content-Type': 'application/json'};\r\n\r\n        if (!token || !email) {throw new Error('Token o correo no encontrados.');}\r\n\r\n        const response = await fetch(`${API_URL}/get-opportunities`, {\r\n            method: 'GET',\r\n            headers: headers,\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n        }\r\n\r\n        return await response.json(); // devuelve objeto\r\n\r\n    } catch (error) {\r\n        console.error(\"Failed to get opportunities:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport async function addInscription(email, opportunityId, formData){\r\n    try {\r\n\r\n        const response = await fetch(`${API_URL}/add-inscription`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Email': email,\r\n                'OpportunityId': opportunityId\r\n            },\r\n            body: JSON.stringify(formData)\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n        }\r\n\r\n        return await response.json();\r\n\r\n    } catch (error) {\r\n        console.error('Failed to add inscription:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport async function getInscriptions() {\r\n    try {\r\n        const token = getToken();\r\n        const email = getEmail();\r\n        if (!token || !email) {throw new Error('Token o correo no encontrados.');}\r\n\r\n        const headers = {\r\n            'Content-Type': 'application/json',\r\n            'Email' : email,\r\n            'Token' : token\r\n        };\r\n\r\n        const response = await fetch(`${API_URL}/get-inscriptions`, {\r\n            method: 'GET',\r\n            headers: headers\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n        }\r\n\r\n        return await response.json(); // devuelve objeto\r\n\r\n    } catch (error) {\r\n        console.error(\"Failed to get inscriptions:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport async function approveInscription(inscriptionId){\r\n    try {\r\n        const body = JSON.stringify({ inscriptionId });\r\n        const headers = {\r\n            'Content-Type': 'application/json'\r\n        };\r\n\r\n        const response = await fetch(`${API_URL}/approve-inscription`, {\r\n            method: 'POST',\r\n            headers: headers,\r\n            body: body\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Failed to approve inscription:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport async function rejectInscription(inscriptionId){\r\n\r\n    try {\r\n        const body = JSON.stringify({ inscriptionId });\r\n        const headers = {\r\n            'Content-Type': 'application/json'\r\n        };\r\n\r\n        const response = await fetch(`${API_URL}/reject-inscription`, {\r\n            method: 'POST',\r\n            headers: headers,\r\n            body: body\r\n        });\r\n\r\n    } catch (error) {\r\n        console.error(\"Failed to reject inscription:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport async function followInstitution(userEmail, institutionEmail){\r\n    try {\r\n        const token = getToken();\r\n        const email = getEmail();\r\n        if (!token || !email) {throw new Error('Token o correo no encontrados.');}\r\n\r\n        const headers =  {\r\n            'Content-Type': 'application/json',\r\n            'Email' : email,\r\n            'Token' : token\r\n        };\r\n\r\n        const response = await fetch(`${API_URL}/follow-institution`, {\r\n                method: 'POST',\r\n                headers: headers,\r\n                body: JSON.stringify({ UserEmail: userEmail, institutionEmail: institutionEmail})\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n            }\r\n\r\n            return await response.json(); // devuelve objeto\r\n\r\n        } catch (error) {\r\n            console.error(\"Failed to follow institution:\", error);\r\n            throw error;\r\n        }\r\n}\r\n\r\nexport async function getFollowedInstitutions(){\r\n    try {\r\n        const token = getToken();\r\n        const email = getEmail();\r\n        if (!token || !email) {throw new Error('Token o correo no encontrados.');}\r\n\r\n        const headers =  {\r\n            'Content-Type': 'application/json',\r\n            'Email' : email,\r\n            'Token' : token\r\n        };\r\n\r\n        const response = await fetch(`${API_URL}/get-followed-institutions?email=${email}`, {\r\n            method: 'GET',\r\n            headers: headers\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n        }\r\n\r\n        return await response.json(); // devuelve objeto\r\n    }\r\n    catch (e){\r\n        throw `Failed to get followed institutions: ${e}`\r\n    }\r\n}\r\n\r\nexport async function isFollowingInstitution(userEmail, institutionEmail){\r\n    /*try {\r\n        const token = getToken();\r\n        const email = getEmail();\r\n        if (!token || !email) {throw new Error('Token o correo no encontrados.');}\r\n\r\n         const headers =  {\r\n            'Content-Type': 'application/json',\r\n            'Email' : email,\r\n            'Token' : token\r\n        };\r\n\r\n        const response = await fetch(`${API_URL}/is-following-institution`, {\r\n            method: 'POST',\r\n            headers: headers,\r\n            body: JSON.stringify({ UserEmail: userEmail, institutionEmail: institutionEmail})\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n        }\r\n\r\n        return await response.json(); // devuelve objeto\r\n\r\n    } catch (error) {\r\n        console.error(\"Failed to check if user is following institution:\", error);\r\n        throw error;\r\n    }*/\r\n        return true;\r\n}\r\n\r\n\r\n\r\n\r\nexport const editUser = async (userData, previousEmail) => {\r\n    try {\r\n        userData.previousEmail = previousEmail;\r\n        const response = await fetch(`${API_URL}/edit-user`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(userData),\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n        }\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error(\"Failed to edit profile:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const editInstitution = async (institutionData, previousEmail) => {\r\n    try {\r\n        institutionData.previousEmail = previousEmail;\r\n        const response = await fetch(`${API_URL}/edit-institution`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(institutionData),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error('Failed to edit institution profile: ' + await response.text());\r\n        }\r\n\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error(\"Failed to edit institution profile:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const getInstitutionData = async (email) => {\r\n    try {\r\n        const response = await fetch(`${API_URL}/get-institution-data?email=${email}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error('Failed to get institution data: ' + await response.text());\r\n        }\r\n\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error(\"Failed to get institution data:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const getUserData = async (email) => {\r\n    try {\r\n        const response = await fetch(`${API_URL}/get-user-data?email=${email}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error('Failed to get user data: ' + await response.text());\r\n        }\r\n\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error(\"Failed to get user data:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport const deleteUser = async (email) => {\r\n    try {\r\n        const response = await fetch(`${API_URL}/delete-user`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ email }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error('Failed to delete user: ' + await response.text());\r\n        }\r\n\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error(\"Failed to delete user:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const deleteInstitution = async (email) => {\r\n    try {\r\n        const response = await fetch(`${API_URL}/delete-institution`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ email }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error('Failed to delete institution: ' + await response.text());\r\n        }\r\n\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error(\"Failed to delete institution:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}